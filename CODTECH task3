import pandas as pd
from sklearn.model_selection import train_test_split
from sklearn.feature_extraction.text import TfidfVectorizer
from sklearn.pipeline import Pipeline
from sklearn.naive_bayes import MultinomialNB
from sklearn.metrics import accuracy_score, precision_score, recall_score, f1_score, classification_report
import nltk
from nltk.corpus import stopwords
from nltk.tokenize import word_tokenize
import re

# Download necessary NLTK resources
nltk.download('punkt')
nltk.download('stopwords')

# Sample DataFrame with text data
data = {
    'text': [
        'I love this product! It is amazing.',
        'This is the worst purchase I have ever made.',
        'I am so happy with my new phone.',
        'The service was terrible and the staff was rude.',
        'Great value for the price. Highly recommend!',
        'I will never buy this again.',
        'The product is okay, but the delivery was delayed.',
        'I am very satisfied with my experience.'
    ],
    'sentiment': ['positive', 'negative', 'positive', 'negative', 'positive', 'negative', 'neutral', 'positive']
}

df = pd.DataFrame(data)

# Define features and target
X = df['text']
y = df['sentiment']

# Text preprocessing and vectorization
def preprocess_text(text):
    # Lowercase the text
    text = text.lower()
    # Remove special characters and digits
    text = re.sub(r'[^a-z\s]', '', text)
    # Tokenize and remove stop words
    tokens = word_tokenize(text)
    tokens = [word for word in tokens if word not in stopwords.words('english')]
    return ' '.join(tokens)

# Apply text preprocessing
X = X.apply(preprocess_text)

# Split data into training and testing sets
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.3, random_state=42)

# Create a pipeline that combines TF-IDF vectorization and Naive Bayes classification
pipeline = Pipeline(steps=[
    ('tfidf', TfidfVectorizer()),  # Convert text to TF-IDF features
    ('clf', MultinomialNB())  # Naive Bayes classifier
])

# Train the model
pipeline.fit(X_train, y_train)

# Predict on the test data
y_pred = pipeline.predict(X_test)

# Evaluate the model
accuracy = accuracy_score(y_test, y_pred)
precision = precision_score(y_test, y_pred, average='weighted')
recall = recall_score(y_test, y_pred, average='weighted')
f1 = f1_score(y_test, y_pred, average='weighted')

# Print evaluation metrics
print(f'Accuracy: {accuracy:.2f}')
print(f'Precision: {precision:.2f}')
print(f'Recall: {recall:.2f}')
print(f'F1 Score: {f1:.2f}')

# Print classification report
print("\nClassification Report:")
print(classification_report(y_test, y_pred))
